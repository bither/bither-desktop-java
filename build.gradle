apply plugin: 'java'
apply plugin: 'signing'


sourceCompatibility = 1.5

version = '1.4.5'

jar {
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    exclude 'META-INF/MANIFEST.MF'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    manifest {
        attributes "Implementation-Title": "bither"
        attributes "Implementation-Version": version
        attributes "Main-Class": "net.bither.BitherInExecutableJar"
    }
    copy {
        from('calc_addrs.cl') {
            //include('**/*')
        }

        into('build/libs/')
    }

    copy {
        from('vanitygen') {
            include('**/*')
        }
        into('build/libs/vanitygen/')
    }

    // remove the security files (from mail.jar / activation.jar) so that the jar will be executable.

}

def bitherDir = "build/bither"
def bitherUnsignedLibPath = "build/lib-unsigned"
def bitherSignedLibPath = "$bitherDir/lib"
def mainJar = "${project.name}-${version}.jar"

task copyJars(type: Copy, dependsOn: [jar]) {
    from configurations.compile

    from("build/libs")
    into(bitherUnsignedLibPath)
    include(mainJar)
    exclude {
        details -> details.file.name.contains('jogl') || details.file.name.contains('gluegen')
    }
}

task jarSign(dependsOn: [copyJars]) {

    ext.srcDir = file(bitherUnsignedLibPath)
    ext.destDir = file(bitherSignedLibPath)
    inputs.dir srcDir
    outputs.dir destDir
    println srcDir
    println destDir

    doLast {

        destDir.mkdirs()
        def libFiles = files { srcDir.listFiles() }
        libFiles.each {

            println "Initializing: " + it
            def storepass = password
            def keystore = storefile
            def alias = alias
            println "storefile:" + storefile
            println "alias:" + alias
//            def storepass=project.getProperty('jarsign.keystore.password')
//            def keystore= project.getProperty('jarsign.keystore.path')
//            def alias= project.getProperty('jarsign.keystore.alias')
            ant.jar(destfile: it, update: true) {
                delegate.manifest {
                    attribute(name: 'permissions', value: 'all-permissions')
                    attribute(name: 'codebase', value: '*')
                }
            }

            ant.signjar(
                    destDir: bitherSignedLibPath,
                    alias: alias,
                    jar: it,
                    keystore: keystore,
                    storepass: storepass,
                    preservelastmodified: 'true'
            )
        }
    }
}




repositories {
    flatDir dirs: "${rootDir}/lib"
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-classic:1.0.9@jar'
    compile 'ch.qos.logback:logback-core:1.0.9@jar'
    compile 'com.google.zxing:javase:3.1.0@jar'
    compile 'com.google.zxing:core:3.1.0@jar'
    compile 'com.google.guava:guava-base:r03@jar'
    compile 'com.google.guava:guava-annotations:r03@jar'
    compile 'org.simplericity.macify:macify:1.6@jar'

    compile 'com.google.guava:guava:13.0.1@jar'
    compile 'com.google.code.findbugs:jsr305:1.3.9@jar'
    compile 'net.jcip:jcip-annotations:1.0@jar'
    compile 'com.lambdaworks:scrypt:1.3.2@jar'
    compile 'io.netty:netty:3.6.3.Final@jar'
    compile 'com.xeiam.xchange:xchange-core:1.10.0@jar'
    compile 'org.java-websocket:Java-WebSocket:1.3.0@jar'
    compile 'org.joda:joda-money:0.8@jar'
    compile 'com.github.mmazi:rescu:1.5.0@jar'
    compile 'com.fasterxml.jackson.core:jackson-core:2.1.1@jar'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.1.1@jar'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.1.1@jar'
    compile 'javax.ws.rs:jsr311-api:1.1.1@jar'

    compile 'commons-codec:commons-codec:1.4@jar'
    compile 'com.toedter:jcalendar:1.3.2@jar'
    compile 'joda-time:joda-time:2.1@jar'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.5@jar'
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.5@jar'
    compile 'com.googlecode.jcsv:jcsv:1.4.0@jar'
    compile 'org.xerial:sqlite-jdbc:3.8.6@jar'

    compile 'commons-lang:commons-lang:2.6@jar'
    compile 'commons-logging:commons-logging:1.2@jar'
    compile 'org.apache.httpcomponents:httpclient:4.2.1@jar'
    compile 'org.apache.httpcomponents:httpmime:4.1@jar'
    compile 'org.apache.httpcomponents:httpcore:4.3.2@jar'
    compile 'org.apache.james:apache-mime4j-core:0.7.1@jar'
    compile 'org.json:json:20140107@jar'
    compile 'com.github.sarxos:webcam-capture:0.3.10@jar'
    compile 'com.nativelibs4java:bridj:0.6.2@jar'
    compile project(':bitherj/bitherj')
    compile 'com.google.guava:guava:13.0.1@jar'
    compile 'com.google.code.findbugs:jsr305:2.0.1@jar'
    compile 'net.jcip:jcip-annotations:1.0@jar'
    compile 'com.lambdaworks:scrypt:1.4.0@jar'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.slf4j:jul-to-slf4j:1.7.9'
    compile 'com.madgag.spongycastle:core:1.51.0.0'
    // compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.intellij:forms_rt:7.0.3'
    compile 'com.miglayout:miglayout-swing:4.2'


    testCompile group: 'junit', name: 'junit', version: '4.11'
}

compileJava.options.encoding = 'UTF-8'
